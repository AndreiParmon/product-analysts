from django.core.management.base import BaseCommand
from analytics.models import Product
import requests


class Command(BaseCommand):
    help = '–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–æ–≤–∞—Ä—ã Wildberries –ø–æ —Å—Å—ã–ª–∫–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (--url)'

    def add_arguments(self, parser):
        parser.add_argument('--url', type=str, help='–°—Å—ã–ª–∫–∞ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é WB (–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–æ–≤)')
        parser.add_argument('--pages', type=int, default=1, help='–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1)')
        parser.add_argument('--limit', type=int, default=100, help='–ú–∞–∫—Å–∏–º—É–º —Ç–æ–≤–∞—Ä–æ–≤')

    def handle(self, *args, **opts):
        url = opts.get('url')
        pages = opts.get('pages')
        limit = opts.get('limit')

        if not url:
            self.stdout.write("‚ùó –£–∫–∞–∂–∏ —Å—Å—ã–ª–∫—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —á–µ—Ä–µ–∑ --url")
            return

        headers = {'User-Agent': 'Mozilla/5.0'}
        menu_url = 'https://static-basket-01.wbbasket.ru/vol0/data/main-menu-ru-ru-v3.json'
        menu = requests.get(menu_url, headers=headers).json()

        catalog_list = []

        def extract(node):
            if isinstance(node, list):
                for item in node:
                    extract(item)
            elif isinstance(node, dict):
                if 'url' in node:
                    catalog_list.append({
                        'name': node['name'],
                        'url': node['url'],
                        'shard': node.get('shard'),
                        'query': node.get('query')
                    })
                if 'childs' in node:
                    extract(node['childs'])

        extract(menu)

        category = next((c for c in catalog_list if url.endswith(c['url'])), None)
        if not category or not category.get('shard'):
            self.stdout.write("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –ø–æ —Å—Å—ã–ª–∫–µ")
            return

        self.stdout.write(f"–ù–∞–π–¥–µ–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è: {category['name']} (shard={category['shard']})")

        page = 1
        total_added = 0

        while page <= pages and total_added < limit:
            params = {
                "appType": 1,
                "curr": "rub",
                "dest": -1257786,
                "page": page,
                "sort": "popular",
                "spp": 0
            }
            if category.get("query"):
                for item in category["query"].split("&"):
                    if "=" in item:
                        k, v = item.split("=")
                        params[k] = v

            catalog_api = f"https://catalog.wb.ru/catalog/{category['shard']}/catalog"
            resp = requests.get(catalog_api, params=params, headers=headers)

            if resp.status_code != 200:
                self.stdout.write(f"–û—à–∏–±–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã {page}: {resp.status_code}")
                break

            products = resp.json().get("data", {}).get("products", [])
            if not products:
                self.stdout.write(f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page}: –Ω–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤.")
                break

            for p in products:
                try:
                    nm_id = p.get("id")
                    name = p.get("name")
                    price = int(p.get("priceU", 0)) / 100
                    discount = int(p.get("salePriceU", 0)) / 100
                    rating = p.get("reviewRating", 0)
                    reviews = p.get("feedbacks", 0)
                    link = f"https://www.wildberries.ru/catalog/{nm_id}/detail.aspx"

                    Product.objects.create(
                        name=name,
                        price=price,
                        discounted_price=discount,
                        rating=rating,
                        review_count=reviews,
                        link=link
                    )

                    self.stdout.write(self.style.SUCCESS(
                        f"‚úì {name} | {price:.2f} ‚Üí {discount:.2f} | ‚òÖ {rating} | –æ—Ç–∑—ã–≤–æ–≤: {reviews}\n  üîó {link}"
                    ))
                    total_added += 1
                    if total_added >= limit:
                        break

                except Exception as e:
                    self.stdout.write(self.style.WARNING(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è \"{p.get('name')}\": {e}"))

            page += 1

        self.stdout.write(self.style.SUCCESS(f"\n–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ {total_added} —Ç–æ–≤–∞—Ä–æ–≤"))